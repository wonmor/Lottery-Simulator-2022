# A module that allows the developer to parse a CFG file in a python script
import configparser

# A built-in math module of Python
import math

# A default python module that lets the developer generate an arbitrary number
import random

# A module that allows the program to easily compute the number of permutations or combinations of a given list
from itertools import permutations
from unicodedata import name

# Import the 'db' variable from extensions.py
from .extensions import db

# Date and time module that will allow us to record the exact time of each player's record
from datetime import datetime


# A class that deals with the player's possession (in-game currency)


class PlayerCurrency(db.Model):

    # Store input values into the instance's variables for the syncronization of the leaderboard
    # Nullable means blank; we do not want the name to be blank.
    name = db.Column(db.String(200), nullable=False)
    # Primary key is always unique! Assigned automatically.
    coins = db.Column(db.Integer, primary_key=True)
    # How many matches are there between the numbers that the user picked and the computer generated?
    successes = db.Column(db.Integer, primary_key=True)
    # Set the default date and time to the UTC standard time
    date_added = db.Column(db.DateTime, default=datetime.utcnow)

    def __init__(self, name, successes):
        self.name = name
        self.coins = 0
        self.successes = successes

    def __repr__(self):
        return f'<Name {self.name}>'

    # Score increases by a factor of O(e^n) as the user correctly guesses one more number; if the user couldn't guess anything correctly, the user will lose 20 dollars => exponential growth
    def add_coin(self):
        # Python's built-in math module allows the developer to use Euler's number in Python
        # As a reminder, e to the power of 0 is 1
        self.coins = self.coins + \
            (20 * math.exp(self.successes)) if self.successes != 0 else self.coins - 20

    # Reset the number of coins that the player possesses
    def reset_coin(self):
        # Import the config.cfg file and read the default value (starting point) of the game currency
        config = configparser.ConfigParser()

        # Get the absolute path of the CFG file by doing os.getcwd() and joining it to config.cfg
        cfg_path = 'website/config.cfg'

        # Read the CFG file
        config.read(cfg_path)

        try:
            self.coins = config.getint("default", "MONEY")
        except:
            print('CFG file failed to load!')

# A class that deals with the set of random numbers picked by the computer


class RandomSet():

    def __init__(self, min_value, max_value, draws):
        self.min_value = min_value  # Minimum value that the raodom number can be
        self.max_value = max_value  # Maximum value that the random numbers can be
        self.count = draws  # Number of draws
        # A list that contains the set that computer generated, containing machine-picked arbitrary numbers
        self.current_set = []
        self.chances = 0  # Chances of winning, calculated by the computer

    # Generate a set containing completely arbitrary numbers
    def generate(self):
        for i in range(self.count):
            # Add a random value generated by a computer to the list using a for loop and a RANDINT built-in function
            self.current_set.append(random.randint(
                self.min_value, self.max_value))

        # Calculate the chances and store it in the instance's variable
        self.chances = calculate_chances(self.current_set, self.count)


def calculate_chances(current_set, count):
    """
    Calculate the chances of winning,
    by using the permuation formula
    and converting it to a percentage.
    """
    return str(f'{(1 / len(permutations(current_set, count))) * 100} %')

# DEVELOPER'S NOTE AND USEFUL LINKS:
# HOW TO READ THE CONFIG.CFG FILE IN A PYTHON SCRIPT: https://stackoverflow.com/questions/45694680/create-enum-constant-in-flask-python
# HOW TO GENERATE A SQLALCHEMY TABLE/DATABASE WITHOUT ENCOUNTERING AN ERROR: https://flask-sqlalchemy.palletsprojects.com/en/2.x/contexts/
    # 1. cd guessing-game-bla-bla
    # 2. python3 (on mac, windows: open a python terminal)
    # 3. >>> import website
    # 4. >>> from website.extensions import db
    # 5. >>> from website import app
    # 6. >>> db.create_all(app=website.create_app())
    # VERY IMPORTANT!!
# HOW TO MAKE THE CONFIGPARSER POINT INTO THE RIGHT DIRECTION WHEN LOOKING FOR CONFIG.CFG: https://stackoverflow.com/questions/55898871/how-to-read-a-config-file-with-pythons-configparser

# HOW TO UPDATE THE REQUIREMENTS FOR REQUIREMENTS.TXT (LIST OF PLUGINS THAT HAVE TO BE INSTALLED WHEN SETTING UP A NEW VIRTUAL ENVIRONMENT - VENV)
# GO TO TERMINAL, RUN WHATEVER COMMAND THAT NEED TO BE RUNNED (e.g. pip3 install --upgrade pip)
# RIGHT AFTER, ENTER THIS COMMAND ON TERMINAL: pip freeze > requirements.txt 

# HOW TO RUN FLASK APP
# $ export FLASK_APP=hello
# $ flask run